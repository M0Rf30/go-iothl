package main

import (
	"bytes"
	"crypto/sha512"
	"encoding/hex"
	"fmt"
	"io"
	"net"
	"strings"

	"github.com/M0Rf30/gopsutil/cpu"
	"github.com/M0Rf30/misc"
	names "github.com/M0Rf30/namesgenerator"
)

const (
	HLPublicKey = "/etc/hyperledger/fabric/tls/server.crt"
	IPFSFile    = "/.ipfs/config"
	TorFile     = "/var/lib/tor/hidden_service/hostname"
)

// IotPeerData represents structured infos on a device
// HumanName: A Human readable and mnemonic-friendly name for IoT devices
// PublicKey: Public Key of peer running on IoT Device
// MACaddress: Mac address of Iot Device
// AlternativeID: A unique id for optional and not trusted checks
// Serial: Serial read from Motherboard of IoT Device
// IPFSaddress: IPFS unique id to send or interact with IoT device filesystem
// TorAddress: Tor address of running hidden service enabled on IoT device
type IotPeerData struct {
	HumanName     string `json:"humanname"`
	PublicKey     string `json:"publickey"`
	MACaddress    string `json:"mac"`
	AlternativeID string `json:"alternativeid"`
	Serial        string `json:"serial"`
	IPFSaddress   string `json:"ipfs"`
	TorAddress    string `json:"tor"`
}

// GetMac is a function to retrieve MAC address on IoT devices.
// It returns MAC address of turned-on devices
func (identity *IotPeerData) GetMac() string {
	var MACaddress string
	interfaces, err := net.Interfaces()
	if err == nil {
		for _, i := range interfaces {
			if i.Flags&net.FlagUp != 0 && bytes.Compare(i.HardwareAddr, nil) != 0 {
				// Don't use random as we have a real address
				MACaddress = i.HardwareAddr.String()
			}
		}
	} else {
		fmt.Println("Error on peer NICs")
		MACaddress = ""
	}
	return MACaddress
}

// GetSerial is a function to retrieve the Serial code of SoCs on IoT devices.
// It return motherboard serial
func (identity *IotPeerData) GetSerial() string {
	cpuInfo, _ := cpu.Info()
	serial := cpuInfo[0].Serial
	if serial == "" {
		serial = "0000000000000000"
	}
	return serial
}

// GetPublicKey is a function to retrieve Public Key Id generated by Hyper Ledger on IoT devices.
// It returns Hyperledger public key of node
func (identity *IotPeerData) GetPublicKey() string {
	hlpub := misc.Exists(HLPublicKey)
	var publicKey []string
	var pubKey string
	var err error
	if hlpub == true {
		publicKey, err = misc.ReadLines(HLPublicKey)
		pubKey = strings.Join(publicKey, "\n")
		if err != nil {
			fmt.Println(err.Error())
		}
	}

	return pubKey
}

// GetAlternativeID is a function to retrieve an alternative Id on IoT devices.
// It returns an alternative id to prove identity
func (identity *IotPeerData) GetAlternativeID(mac, serial string) string {
	input := mac + serial
	sha512 := sha512.New()
	io.WriteString(sha512, input)
	return hex.EncodeToString(sha512.Sum(nil))
}

// GetTorAddress is a function to retrieve .onion address for hidden_services on IoT devices.
// It returns onion address as string
func (identity *IotPeerData) GetTorAddress() string {
	homeDir := misc.UserHomeDir()
	var torAddress string
	torHostnamePath := homeDir + TorFile
	torHostExists := misc.Exists(torHostnamePath)
	if torHostExists == true {
		hostname, err := misc.ReadLines(torHostnamePath)
		if err != nil {
			fmt.Println("Errors on hostname retrieving")
			torAddress = ""
		} else {
			torAddress = hostname[0]
		}
	}
	return torAddress
}

// GetIPFS is a function to retrieve IPFS ID on IoT devices.
// It returns IPFS address of peer
func (identity *IotPeerData) GetIPFS() string {
	j := misc.JSONIdentity{}
	var ipfsAddress string
	homeDir := misc.UserHomeDir()
	ipfsConfigPath := homeDir + IPFSFile

	ipfsExist := misc.Exists(ipfsConfigPath)
	if ipfsExist != true {
		fmt.Println("IPFS config file not found")
	} else {
		err := j.ParseJSON(ipfsConfigPath)
		if err == nil {
			ipfsAddress = j.Identity.PeerID
		} else {
			ipfsAddress = ""
		}
	}
	return ipfsAddress
}

// Init initializes the IotPeerData struct
func (identity *IotPeerData) Init() {
	identity.HumanName = names.GetRandomName(10)
	identity.MACaddress = identity.GetMac()
	identity.IPFSaddress = identity.GetIPFS()
	identity.PublicKey = identity.GetPublicKey()
	identity.Serial = identity.GetSerial()
	identity.TorAddress = identity.GetTorAddress()
	identity.AlternativeID = identity.GetAlternativeID(identity.MACaddress, identity.Serial)

}

func main() {
	iot := IotPeerData{}
	iot.Init()
	fmt.Println("{\"Args\":[\"init\"," +
		"\"" + iot.HumanName + "\"," +
		"\"" + iot.PublicKey + "\"," +
		"\"" + iot.MACaddress + "\"," +
		"\"" + iot.AlternativeID + "\"," +
		"\"" + iot.Serial + "\"," +
		"\"" + iot.IPFSaddress + "\"," +
		"\"" + iot.TorAddress + "\"]}")
}
